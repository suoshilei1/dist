import{a9 as f,V as _,aa as A,al as M,r as p}from"./index-DU5BV6sj.js";import{d as y}from"./dayjs.min-BzhD8rH5.js";async function E(e){if(!Array.isArray(e))throw new Error("输入必须是数组类型");const t=100,i=(a,o)=>{const s=[];for(let r=0;r<a.length;r+=t){const u=a.slice(r,r+t);s.push(...o(u)),r+t<a.length&&setTimeout(()=>{},0)}return s};try{const a=new Map,o=[];i(e,c=>(c.forEach(n=>{if(!n.id){console.warn("跳过无效的表计(缺少ID)",n);return}try{a.set(n.id,{...n,label:`${n.meter_code||"未知"} (${n.id})`,children:[],level:1})}catch(l){console.error(`处理表计${n.id}时出错:`,l)}}),[]));const s=(c,n)=>{var l;c.level=n,(l=c.children)!=null&&l.length&&c.children.forEach(d=>s(d,n+1))};for(const[c,n]of a)try{const l=n.parent_id;if(!l||!a.has(l))o.push(n);else{const d=a.get(l);d?d.children.push(n):(console.warn(`未找到节点${c}的父节点${l}`),o.push(n))}}catch(l){console.error(`建立节点${c}关系时出错:`,l)}o.forEach(c=>s(c,1));const r=c=>{if(!c)return 999999;const n=c.match(/-(\d+)$/);return n?+n[1]:999999},u=(c,n=5e3)=>new Promise((l,d)=>{const w=setTimeout(()=>{d(new Error("排序超时"))},n);try{c.sort((h,g)=>r(h.meter_code)-r(g.meter_code)),c.forEach(h=>{var g;(g=h.children)!=null&&g.length&&u(h.children)}),clearTimeout(w),l()}catch(h){clearTimeout(w),d(h)}});try{await u(o)}catch(c){console.error("排序出错:",c)}return o}catch(a){return console.error("构建树结构时发生严重错误:",a),e.map(o=>({...o,label:`${o.meter_code||"未知"} (${o.id})`,children:[],level:1}))}}function Y(e){var t;return e==null?"0.00":typeof e=="string"&&e.includes("%")?e:((t=Number(e))==null?void 0:t.toFixed(2))??"0.00"}function b(e){return(e==null?void 0:e.toString())??"0"}function L(e,t,i=2){return e===0?"0.00%":`${((e-t)/e*100).toFixed(i)}%`}function P(e,t,i="day"){if(!["day","month","year"].includes(i))throw new Error('Unit must be either "day", "month", or "year"');const a=[];let o=e;const s={day:"YYYY-MM-DD",month:"YYYY-MM",year:"YYYY"};for(;o<=t;)a.push(y(o).format(s[i])),o=y(o).add(1,i).valueOf();return a}function T(e,t){var r,u;const i=t.aggregated_data,a=i.reduce((c,n)=>c+(+n.Value||0),0).toFixed(2),o=((r=i[0])==null?void 0:r.begin)||0,s={};return i.forEach((c,n)=>{s[`usage_${n}`]=c.Value||0,s[`reading_${n}`]=c.end||0}),{meter_code:e.meter_code,area_id:e.area_id,level:e.level,installation_location:e.installation_location,specification:e.specification,hasChild:((u=e.children)==null?void 0:u.length)>0,customChildren:e.children,startReading:o,...s,sum:a}}const N=(e,t,i,a=!1,o)=>{if(!Array.isArray(t)||t.length===0)return e.map(r=>({...r,[i]:0,...a?{[`${i}_time`]:o}:null}));const s=new Map;return t.forEach(r=>{const{device_id:u,value:c,time:n}=r,l=Number(c);if(u&&!isNaN(l)&&n){const d=l<0?0:l;(!s.has(u)||new Date(n)>new Date(s.get(u).time))&&s.set(u,{value:d,time:n,isValid:!0})}}),e.map(r=>{const u=s.get(r.id),c={...r,[i]:u!=null&&u.isValid?u.value:0};return a&&(c[`${i}_time`]=(u==null?void 0:u.time)||o),c})};function V(e){var t;if(!Array.isArray(e))return[];if(!(e!=null&&e.length))return[];if(!((t=e[0])!=null&&t.length))return[];try{const i=e[0].map(a=>{if(!a||typeof a!="object"||!("Value"in a))throw new Error("Invalid item structure");return{...a,Value:parseFloat(a.Value)||0}});for(let a=1;a<e.length;a++){const o=e[a];if(!Array.isArray(o)||o.length!==i.length){console.warn(`Skipping invalid array at index ${a}`);continue}o.forEach((s,r)=>{if(!s||typeof s!="object"||!("Value"in s)){console.warn(`Skipping invalid item at array ${a}, index ${r}`);return}const u=parseFloat(s.Value)||0;i[r].Value=(i[r].Value||0)+u,i[r].Value=Number(i[r].Value)})}return i}catch(i){return console.error("Error processing arrays:",i),[]}}const v=(e={})=>f.get("/meters/",{params:{company_id:_().currentCompany.id,...e}}),j=e=>f.post("/meters/",e),k=e=>f.delete("/meters/",{data:{id:e}}),D=e=>f.patch("/meters/",e),F=(e={})=>f.get("/pipeline/",{params:e}),W=e=>f.post("/pipeline/",e),q=e=>(console.log(e),f.delete("/pipeline/",{data:{id:""+e}})),B=(e={})=>f.get("/detail/",{params:e});function $(e){return!(e!=null&&e.aggregated_data)||!Array.isArray(e.aggregated_data)?e:{...e,aggregated_data:e.aggregated_data.sort((t,i)=>new Date(t.start_time)-new Date(i.start_time))}}const S=async(e={})=>e.id?e.interval&&!["half_hour","day","month"].includes(e.interval)?Promise.reject(new Error("无效的interval参数")):f.get("/report/",{params:e}).then($).catch(t=>{throw console.error("获取表计数据失败:",t),t}):Promise.reject(new Error("表计ID是必需的")),O=async(e={})=>{try{if(!e.id)throw new Error("公司ID是必需的");if(!e.type)throw new Error("表计类型是必需的");let t=m().treeDataForChart;t.length||(await m().fetchMeterList(),t=m().treeDataForChart);const i=t.map(r=>S({id:r.id,start_time:e.start_time,end_time:e.end_time,interval:e.interval})),o=(await Promise.all(i)).map(r=>r==null?void 0:r.aggregated_data).filter(r=>Array.isArray(r)&&r.length>0),s=V(o);return{code:200,message:"成功",date:new Date().toISOString(),aggregated_data:s.map(r=>({...r}))}}catch(t){throw console.error("获取公司报告失败:",t),t}},U=(e={})=>f.get("/algorithm/water_static",{params:e}),x=(e={})=>f.get("/record/latest",{params:e});function C(e){const t=[];function i(a,o){t[o]||(t[o]=[]),a.forEach(s=>{const r={...s};t[o].push(r),s.children&&s.children.length>0&&i(s.children,o+1)})}return i(e,0),t}const m=A("meter",()=>{const e=M([]),t=p([]),i=p([]);let a=p(null),o=p(1);async function s(n){n={type:o.value,...n};const l=await v(n);if(l.code!==200)throw new Error(l.message||"获取表计列表失败");return t.value=l.data,e.value=await E(l.data),i.value=C(e.value),l}async function r(n){let l={...a.value,...n},d=await D(l);if(d.code!==200)throw new Error(d.message||"获取表计列表失败")}function u(n){a.value=n}function c(n){o.value=n}return{treeDataForChart:e,meterLevels:i,meterList:t,fetchMeterList:s,currentMeter:a,setCurrentMeter:u,addMeterLocation:r,currentSelectedType:o,setCurrentSelectedType:c}});export{P as a,S as b,L as c,b as d,v as e,Y as f,B as g,F as h,q as i,W as j,k,D as l,N as m,x as n,j as o,V as p,U as q,O as r,T as t,m as u};
